name: Build cache

on: 
  #push:
    #branches:
    #- "*"
  workflow_dispatch:
    inputs:
      production:
        description: 设置编译的固件型号,空格分隔.
        default: "MI-R4A"
  
jobs:
  build:
    #name: build
    runs-on: ubuntu-latest
    #strategy:
      #matrix:
        #targets: [MI-R4A]
    steps:
      - uses: actions/checkout@v3
      - uses: hendrikmuhs/ccache-action@v1.2
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.19.2'
          
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
           #npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.npm
          key: ${{ runner.os }}-go-v1-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-go-
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
            npm-feature-${{ hashFiles('package-lock.json') }}
            npm-feature-
            npm-
      - name: Prepare
        run: |
          sudo apt update
          sudo apt install libtool-bin gperf python3-docutils autopoint gettext ccache
          # https://github.com/actions/setup-go/issues/107
          echo "${GOROOT}/bin" >> $GITHUB_PATH
          echo "DIR=/opt/Padavan-KVR" >> $GITHUB_ENV
      - name: Clone source code
        run: |
           git clone --depth=1 https://github.com/vipshmily/Padavan-KVR.git ${{ env.DIR }}
           cd ${{ env.DIR }}/toolchain-mipsel
           sh dl_toolchain.sh
           mkdir -p /opt/images/
      - name: Set golang
        run: |
         cp -f bashScripts/go.sh $(pwd)
         sudo chmod 777 ./go.sh
         bash ./go.sh
      - name: Start build
        env:
          TNAME: "${{ github.event.inputs.production }}"
          MHZ: 1120               # CPU超频频率 必须为20的倍数
        run: |
         for m in $TNAME;
         do
         echo "::group::编译 ${m}"
         cd ${{ env.DIR }}/trunk
         sudo ./build_firmware_modify $m 0
         sudo mv -f images/*.trx /opt/images/
         echo "::endgroup::"
         done
         #fakeroot ./build_firmware_ci ${{ matrix.targets }}
          echo "TAG_ANME=$(TZ='Asia/Shanghai' date +%Y.%m.%d)" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v3
        with:
          name: images
          path: /opt/images/*.trx
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ env.TAG_ANME }}
          force_push_tag: true
      - uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          tag: ${{ env.TAG_ANME }}
          artifacts: /opt/images/*.trx
          allowUpdates: true
